----- DIFF | diff file1 file2---------------------------------------------------------------
< = removed  
> = added 

5c5,6 = on line 5, c= Changed 
11a13,15 = a = added 13-15 new lines

----- SHOW MORE details | diff -u file1 file2---------------------------------------------------------------

----- SHOW MORE details and create a file showing this | diff -u file1OG.py file2fixed.py > file3.diff---------------------------------------------------------------

----- PATCH - takes a file generated by diff and applies changes to original file  ---------------------------------------------------------------
        patch ogfile < difffile

----- GIT SETUP / LOGIN  ---------------------------------------------------------------
git config --global user.email "me@example.com"
git config --global user.name "My name"

----- CREATE NEW REPO  ---------------------------------------------------------------
mkdir <dirName>
cd <dirName>
git init

----- TRACK USING GIT (STAGING)  ---------------------------------------------------------------
git add file.py
git status

----- GET CURRENT WORKING TREE & PENDING CHANGES   ---------------------------------------------------------------
git status

----- COMMIT w/ EDITOR  ---------------------------------------------------------------
git commit (opens text editor)

(commit message will be needed, add notes about the commit)

----- COMMIT WITH COMMENT W/O opening editor |  ---------------------------------------------------------------
git commit -m '<MESSAGE>'

-----   ---------------------------------------------------------------
#Study guide: Git
#There are three sections: 
1. Git directory, 
2. Working tree, 
3. Staging area.

#Git config command
#The Git config command is used to set the values to identify who made changes to Git repositories. 
#To set the values of user.email and user.name to your email and name, 
#: ~$ git config  - -global user.email "#me@example.com"
#: ~$ git config  - -global user.name “My name”
#(Also to check our config: git config -l)


#Git init command = can create a new empty repository in a current directory or re-initialize an existing one. 
#: ~/checks$ git init

#Git ls -la command = checks that an identified directory exists.
#: ~/checks$ ls -la

#The ls-l.git checks inside the directory to see the different things that it contains. 
#This is called the Git directory. The Git directory is a database for your Git project 
#that stores the changes and the change history.
#: ~/checks$ ls -l .git/

#Git add command allows Git to track your file and uses the selected file as a parameter 
#when adding it to the staging area. The staging area is a file maintained by Git that 
#contains all the information about what files and changes are going to go into your next commit.
#:~/checks$ git add disk_usage.py

#Git status command = to get some information about the current working tree and pending changes.
#:~/checks$ git status

#Git commit command = to remove changes made from the staging area to the .git directory. When 
#this command is run, it tells Git to save changes. A text editor is opened that allows a commit message to be entered.
#:~/checks$ git commit

#git log = check commit history, author of each commit, timestamp and commit message

#Guidelines for writing commit messages
#A commit message is generally broken into two sections: a short summary and a description of the changes. 
#When the git commit command is run, Git will open a text editor to write your commit message. A good commit 
#message includes the following:

#Summary: The first line contains the summary, formatted as a header, containing 50 characters or less. 

#Description: The description is usually kept under 72 characters and provides detailed information about 
#the change. It can include references to bugs or issues that will be fixed with the change. It also can 
#include links to more information when relevant. 

#Example of a commit message:  #https://commit.style/
 
-----   ---------------------------------------------------------------